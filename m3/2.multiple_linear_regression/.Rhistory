setwd("~/Code/Stepik_R_1/m3/1.correlation_and_simple_linear_regression")
setwd("~/Code/Stepik_R_1/m3/1.correlation_and_simple_linear_regression")
df <- mtcars
cor.test(x = df$mpg, y = df$hp)
fit <- cor.test(x = df$mpg, y = df$mpg)
cor.test(~ mpg + hp, df)
str(fit)
fit$p.value
plot(x = df$mpg, y = df$hp)
library(ggplot2)
ggplot(df, aes(x = df$mpg, y = df$hp, col = factor(cyl)))+
geom_point(size = 5)
df_numeric <- df[,c(1,3:7)]
pairs(df_numeric)
cor(df_numeric)
library(psych)
corr <- corr.test(df_numeric)
str(corr)
corr$r
f <- corr.test(df[, c(1,5)])
f$r[,1][2]
f$p
library(psych)
corr.calc <- function(x) {
fit <- corr.test(x)
return(c(fit$r[2], fit$p[2]))
}
corr.calc(mtcars[, c(1,5)])
iris$Petal.Length <- -iris$Petal.Length
#step6 <- read.table("step6.csv",  header=TRUE, sep=',' )
step6 <- iris
nums <- step6[sapply(step6, is.numeric)]
fff <- corr.test(nums)
r <- fff$r
diag(r) <- 0
which.max(abs(r))
r[12]
filtered.cor <- function(x) {
nums <- x[sapply(x, is.numeric)]
r <- corr.test(nums)$r
diag(r) <- 0
return(r[which.max(abs(r))])
}
step6 <- read.table("step6.csv",  header=TRUE, sep=',' )
filtered.cor(step6)
iris$Petal.Length <- -iris$Petal.Length
filtered.cor(iris)
test_data <- read.csv("https://stepik.org/media/attachments/course/129/test_data.csv")
gg <- shapiro.test(test_data[, 1])
yy <- corr.test(test_data)$r[2]
smart_cor <- function(x) {
first_col_test <- shapiro.test(x[, 1])
second_col_test <- shapiro.test(x[, 2])
method <- "pearson"
if (first_col_test$p < 0.05 | second_col_test$p < 0.05) {
method <- "spearman"
}
return(corr.test(x, method = method)$r[2])
}
smart_cor(test_data)
setwd("~/Code/Stepik_R_1/m3/1.correlation_and_simple_linear_regression")
tt <- read.table("data1.txt")
tt
setwd("~/Code/Stepik_R_1/m3/1.correlation_and_simple_linear_regression")
tt <- read.table("data1.txt", header = F)
tt
tt <- as.data.frame(tt)
View(tt)
tt$V1
fit <- lm(v1 ~ v2, tt)
fit <- lm(V1 ~ V2, tt)
summary(fit)
setwd("~/Code/Stepik_R_1/m3/1.correlation_and_simple_linear_regression")
tt <- read.table("data2.txt", header = F)
tt <- as.data.frame(tt)
fit <- lm(V1 ~ V2, tt)
summary(fit)
diam <- diamonds
diam
View(diam)
diam <- diamonds[diamonds$cut == 'ideal']
diam <- diamonds[,diamonds$cut == 'ideal']
diamonds$cut
diam <- diamonds[diamonds$cut == 'Ideal']
diamonds$cut == 'Ideal'
diamonds
diam <- diamonds[diamonds$cut == 'Ideal']
diam <- subset(x = diam, cut == 'Ideal')
diam <- subset(x = diam, cut == 'Ideal')
View(diam)
diam <- subset(x = diam, cut == 'Ideal' & carat == 0.48)
View(diam)
d_fit <- lm(price ~ depth, diam)
d_fit$coefficients
d_fit
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
smooth()
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth()
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth(se = F)
diam <- subset(x = diamonds, cut == 'Ideal' & carat == 0.48)
d_fit <- lm(price ~ depth, diam)
d_fit$coefficients
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth(se = F)
diam <- subset(x = diamonds, cut == 'Ideal' & carat == 0.46)
d_fit <- lm(price ~ depth, diam)
d_fit$coefficients
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth(se = F)
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth(se)
diam <- subset(x = diamonds, cut == 'Ideal' & carat == 0.46)
d_fit <- lm(price ~ depth, diam)
d_fit$coefficients
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth()
ggplot(diam, aes(x = diam$depth, y = diam$depth))+
geom_point()+
geom_smooth()
ggplot(diam, aes(x = diam$depth, y = diam$pric))+
geom_point()+
geom_smooth()
ggplot(diam, aes(x = diam$depth, y = diam$price))+
geom_point()+
geom_smooth()
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth()
my_df = iris[,1:2]
cor.test(my_df)
my_df = iris[,1:2]
cor.test(my_df)
cor.test(my_df[1], my_df[2])
my_df
my_df[1]
my_df[2]
my_df[,1]
cor.test(my_df[,1], my_df[,2])
cor <- cor.test(my_df[,1], my_df[,2])
cor.test(my_df[,1], my_df[,2])
?cor.test
cor.test(my_df[,1], my_df[,2], method = "pearson")
cor <- cor.test(my_df[,1], my_df[,2], method = "pearson")
cor$p
cor$p.value
my_df = iris[,c(1,4)]
cor <- cor.test(my_df[,1], my_df[,2], method = "pearson")
cor$p.value
fit <- lm(v1, v2)
my_df = iris[,c(1,4)]
cor <- cor.test(my_df[,1], my_df[,2], method = "pearson")
cor$p.value
v1 <- my_df[, 1]
v2 <- my_df[, 2]
fit <- lm(v1, v2)
my_df
names(my_df) <- c('v1', 'v2')
my_df
fit <- lm(v1 ~ v2, my_df)
summary(fit)
fit$fitted.values
regr.calc <- function(x) {
cor <- cor.test(x[,1], x[,2])
if (cor$p > 0.05) {
return("There is no sense in prediction")
}
names(x) <- c('v1', 'v2')
fit <- lm(v1 ~ v2, x)
return(x$fit <- fit$fitted.values)
}
my_df = iris[,c(1,4)]
regr.calc(my_df)
regr.calc <- function(x) {
cor <- cor.test(x[,1], x[,2])
if (cor$p.value > 0.05) {
return("There is no sense in prediction")
}
names(x) <- c('v1', 'v2')
fit <- lm(v1 ~ v2, x)
return(x$fit <- fit$fitted.values)
}
my_df = iris[,c(1,4)]
regr.calc(my_df)
regr.calc <- function(x) {
cor <- cor.test(x[,1], x[,2])
if (cor$p.value > 0.05) {
return("There is no sense in prediction")
}
names(x) <- c('v1', 'v2')
fit <- lm(v1 ~ v2, x)
x$fit <- fit$fitted.values
return(x)
}
my_df = iris[,c(1,4)]
regr.calc(my_df)
str(ir)
ir <- iris
str(ir)
ggplot(ir, aes(x = Sepal.Width, y = Petal.Width))+
geom_point()
ggplot(ir, aes(x = Sepal.Width, y = Petal.Width, col = Species))+
geom_point()
ggplot(ir, aes(x = Sepal.Width, y = Petal.Width, col = Species))+
geom_point()+
geom_smooth()
ggplot(ir, aes(x = Sepal.Width, y = Petal.Width))+
geom_point()+
geom_smooth()
ggplot(ir, aes(x = Sepal.Width, y = Petal.Width, col = Species))+
geom_point()+
geom_smooth()
ggplot(diam, aes(x = diam$price, y = diam$depth))+
geom_point()+
geom_smooth()
ggplot(ir, aes(x = Sepal.Width, y = Petal.Width, col = Species))+
geom_point()+
geom_smooth(method = 'lm')
ggplot(mtcars, aes(mpg, disp))+
geom_point(aes(col = factor(am)))+
geom_smooth()
ggplot(mtcars, aes(mpg, disp, col = factor(am)))+
geom_point()+
geom_smooth()
ggplot(mtcars, aes(mpg, disp))+
geom_point()+
geom_smooth(aes(col = factor(am)))
ggplot(mtcars, aes(mpg, disp, col = factor(am)))+
geom_point()+
geom_smooth()
setwd("~/Code/Stepik_R_1/m3/2.multiple_linear_regression")
setwd("~/Code/Stepik_R_1/m3/2.multiple_linear_regression")
?swiss
swiss <- data.frame(swiss)
str(swiss)
hist(swiss$Fertility)
hist(swiss$Fertility, color = 'red')
hist(swiss$Fertility, col = 'red')
hist(swiss$Fertility, col = 'red')
str(swiss)
View(swiss)
summary(fit)
fit <- lm(Fertility ~ Examination + Catholic)
summary(fit)
fit <- lm(Fertility ~ Examination + Catholic)
fit <- lm(Fertility ~ Examination + Catholic, swiss)
summary(fit)
fit2 <- lm(Fertility ~ Examination * Catholic, swiss)
summary(fit2)
fit3 <- lm(Fertility ~ Education, swiss)
summary(fit3)
fit3 <- lm(Fertility ~ Examination * Education, swiss)
summary(fit3)
confint(fit2)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv"ÿ)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
View(test_data)
str(test_data)
vv <- subset(test_data, !is.na(y))
vv
fit <- lm(y ~ x_1 + x_2, vv)
summary(fit)
predict(fit, y)
predict(fit, vv$y)
predict(fit, c(1,2))
predict(fit, data.frame(vv$x_1, vv$x_2))
vv <- subset(test_data, !is.na(y))
fit <- lm(y ~ x_1 + x_2, vv)
predict(fit, data.frame(vv$x_1, vv$x_2))
predict(fit, data.frame(x_1 = vv$x_1, x_2 = vv$x_2))
predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
test_data$y_full <- ifelse(is.na(test_data$y), 1, 2)
test_data
test_data$y_full <- ifelse(is.na(test_data$y), predicted, test_data$y)
predicted <- predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
test_data$y_full <- ifelse(is.na(test_data$y), predicted, test_data$y)
test_data
predicted
vv <- subset(test_data, !is.na(y))
fit <- lm(y ~ x_1 + x_2, vv)
predicted <- predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
test_data$y_full <- 0
test_data
for(val in test_data) {
if(is.na(val$y)) {
val$y_full <- 2
}
}
for(val in test_data) {
if(is.na(val$y)) {
# val$y_full <- 2
}
}
for(val in test_data) {
print(val)
#if(is.na(val$y)) {
# val$y_full <- 2
#}
}
length(test_data)
heights(test_data)
test_data[,1]
test_data[1,]
nrow(test_data)
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
}
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
print(row)
}
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
if (is.na(row$y)) {
}
}
predicted <- predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
predicted
predicted[1]
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
if (is.na(row$y)) {
row$y_full <- predicted[i]
}
}
vv <- subset(test_data, !is.na(y))
fit <- lm(y ~ x_1 + x_2, vv)
predicted <- predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
test_data$y_full <- 0
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
if (is.na(row$y)) {
row$y_full <- predicted[i]
} else {
row$y_full <- row$y
}
}
test_data
or (i in 1:nrow(test_data)) {
row <- test_data[i,]
if (is.na(row$y)) {
row$y_full <- predicted[i]
} else {
row$y_full <- row$y
}
}
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
if (is.na(row$y)) {
row$y_full <- predicted[i]
} else {
row$y_full <- row$y
}
}
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
print(is.na(row$y))
#if (is.na(row$y)) {
#  row$y_full <- predicted[i]
#} else {
#  row$y_full <- row$y
#}
}
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
row$y_full <- 22
#if (is.na(row$y)) {
#  row$y_full <- predicted[i]
#} else {
#  row$y_full <- row$y
#}
}
test_data
for (i in 1:nrow(test_data)) {
row <- test_data[i,]
row$y_full <<- 22
#if (is.na(row$y)) {
#  row$y_full <- predicted[i]
#} else {
#  row$y_full <- row$y
#}
}
vv <- subset(test_data, !is.na(y))
fit <- lm(y ~ x_1 + x_2, vv)
test_data$pred <- predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
test_data
vv <- subset(test_data, !is.na(y))
fit <- lm(y ~ x_1 + x_2, vv)
test_data$pred <- predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
test_data
test_data$y_full <- ifelse(is.na(test_data$y), test_data$pred, test_data$y)
test_data
vv <- subset(test_data, !is.na(y))
fit <- lm(y ~ x_1 + x_2, vv)
test_data$pred <- predict(fit, data.frame(x_1 = test_data$x_1, x_2 = test_data$x_2))
test_data$y_full <- 0
test_data$y_full <- ifelse(is.na(test_data$y), test_data$pred, test_data$y)
test_data$pred <- NULL
test_data
fill_na <- function(x) {
fit <- lm(y ~ x_1 + x_2, x)
x$pred <- predict(fit, data.frame(x_1 = x$x_1, x_2 = x$x_2))
x$y_full <- 0
x$y_full <- ifelse(is.na(x$y), x$pred, x$y)
return(x)
}
fill_na(test_data)
fill_na <- function(x) {
fit <- lm(y ~ x_1 + x_2, x)
x$pred <- predict(fit, data.frame(x_1 = x$x_1, x_2 = x$x_2))
x$y_full <- 0
x$y_full <- ifelse(is.na(x$y), x$pred, x$y)
x$pred <- NULL
return(x)
}
fill_na(test_data)
predict(fit, x)
test_data$pred <- predict(fit, test_data)
predict(fit, test_data)
fill_na <- function(x) {
fit <- lm(y ~ x_1 + x_2, x)
#x$pred <- predict(fit, x)
x$y_full <- ifelse(is.na(x$y), predict(fit, x), x$y)
x$pred <- NULL
return(x)
}
fill_na(test_data)
fill_na <- function(x) {
fit <- lm(y ~ x_1 + x_2, x)
x$y_full <- ifelse(is.na(x$y), predict(fit, x), x$y)
return(x)
}
fill_na(test_data)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
fill_na <- function(x) {
fit <- lm(y ~ x_1 + x_2, x)
x$y_full <- ifelse(is.na(x$y), predict(fit, x), x$y)
return(x)
}
fill_na(test_data)
